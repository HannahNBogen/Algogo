/* The following code was generated by JFlex 1.4.1 on 01/07/16 19:24 */

/*
 * Generated on 7/1/16 7:24 PM
 */
package xyz.algogo.desktop.res.lang.highlighting;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class en extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\7\1\0\1\14\1\6\22\0\1\14\1\30\1\6"+
    "\1\0\1\1\1\31\1\46\1\6\2\27\1\31\1\32\1\6\1\20"+
    "\1\16\1\31\1\4\3\3\4\3\2\3\1\30\1\6\1\47\1\45"+
    "\1\50\1\30\1\0\1\24\1\13\1\5\1\40\1\17\1\23\1\37"+
    "\1\33\1\35\2\1\1\25\1\43\1\12\1\42\1\34\1\1\1\22"+
    "\1\26\1\21\1\11\1\41\1\36\1\15\1\44\1\1\1\27\1\10"+
    "\1\27\1\30\1\2\1\0\1\24\1\13\1\5\1\40\1\17\1\23"+
    "\1\37\1\33\1\35\2\1\1\25\1\43\1\12\1\42\1\34\1\1"+
    "\1\22\1\26\1\21\1\11\1\41\1\36\1\15\1\44\1\1\1\27"+
    "\1\51\1\27\1\30\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\2\2\1\1\1\3\2\1\1\4\2\1"+
    "\1\5\5\1\1\6\3\5\3\1\4\5\1\0\1\7"+
    "\1\0\2\7\3\1\1\10\3\1\1\11\12\1\1\0"+
    "\1\10\1\0\1\12\3\1\1\13\13\1\1\0\3\1"+
    "\1\14\1\15\5\1\1\0\10\1\1\0\32\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\52\0\374"+
    "\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c"+
    "\0\u0276\0\u02a0\0\52\0\52\0\u02ca\0\u02f4\0\u031e\0\u0348"+
    "\0\u0372\0\u039c\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u046e\0\u017a"+
    "\0\u0498\0\u04c2\0\u04ec\0\u0516\0\u0540\0\u056a\0\u0594\0\u05be"+
    "\0\u05e8\0\124\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba\0\u06e4"+
    "\0\u070e\0\u0738\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u04c2"+
    "\0\u0834\0\u085e\0\u0888\0\124\0\u08b2\0\u08dc\0\u0906\0\u0930"+
    "\0\u095a\0\u0984\0\u09ae\0\u09d8\0\u0a02\0\u0a2c\0\u0a56\0\u0a80"+
    "\0\u0aaa\0\u0ad4\0\u0afe\0\124\0\124\0\u0b28\0\u0b52\0\u0b7c"+
    "\0\u0ba6\0\u0bd0\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc"+
    "\0\u0cf6\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c"+
    "\0\u0e46\0\u0e70\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18\0\u0f42\0\u0f6c"+
    "\0\u0f96\0\u0fc0\0\u0fea\0\u1014\0\u103e\0\u1068\0\u1092\0\u10bc"+
    "\0\u10e6\0\u1110\0\u113a\0\u1164\0\u118e\0\u11b8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\2\1\7\1\2"+
    "\1\3\1\10\1\11\1\12\1\3\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\3\1\22\1\23\1\24"+
    "\1\25\1\26\2\3\1\27\1\30\2\3\1\31\3\3"+
    "\1\25\1\32\1\33\1\34\1\35\53\0\5\3\2\0"+
    "\1\36\3\3\1\0\1\3\1\0\1\3\1\0\6\3"+
    "\4\0\12\3\5\0\3\37\2\4\1\37\2\0\4\37"+
    "\1\0\1\37\1\40\1\41\1\0\6\37\4\0\12\37"+
    "\5\0\3\37\2\4\1\37\2\0\4\37\1\0\1\42"+
    "\1\40\1\41\1\0\6\37\4\0\12\37\6\0\5\3"+
    "\2\0\1\36\3\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\43\4\3\4\0\12\3\6\0\5\3\2\0"+
    "\1\36\1\44\2\3\1\0\1\3\1\0\1\3\1\0"+
    "\6\3\4\0\12\3\6\0\5\3\2\0\1\36\3\3"+
    "\1\0\1\3\1\0\1\45\1\0\6\3\4\0\12\3"+
    "\21\0\1\12\40\0\2\46\46\0\5\3\2\0\1\36"+
    "\1\3\1\47\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\4\3\1\50\1\3\4\0\12\3\25\0\1\24\24\0"+
    "\1\24\5\0\5\3\2\0\1\36\3\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\51\4\3\4\0\7\3"+
    "\1\52\1\3\1\53\6\0\5\3\2\0\1\36\3\3"+
    "\1\0\1\3\1\0\1\54\1\0\6\3\4\0\12\3"+
    "\6\0\5\3\2\0\1\36\3\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\55\1\3\1\56\2\3\4\0"+
    "\7\3\1\57\2\3\6\0\5\3\2\0\1\36\3\3"+
    "\1\0\1\3\1\0\1\3\1\0\5\3\1\60\4\0"+
    "\12\3\6\0\5\3\2\0\1\36\3\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\61\5\3\4\0\1\62\11\3"+
    "\52\0\1\24\36\0\1\24\12\0\1\24\5\0\5\3"+
    "\2\0\1\36\3\3\1\0\1\3\1\0\1\3\1\0"+
    "\2\3\1\52\3\3\4\0\12\3\6\0\5\3\2\0"+
    "\1\36\3\3\1\0\1\3\1\0\1\3\1\0\6\3"+
    "\4\0\1\63\11\3\6\0\5\3\2\0\1\36\3\3"+
    "\1\0\1\3\1\0\1\3\1\0\3\3\1\64\2\3"+
    "\4\0\12\3\53\0\1\24\52\0\1\25\52\0\1\25"+
    "\52\0\1\24\11\0\1\65\40\0\6\37\2\0\4\37"+
    "\1\0\1\37\1\0\1\37\1\0\6\37\4\0\12\37"+
    "\5\0\3\37\2\66\1\37\2\0\4\37\1\0\1\37"+
    "\1\0\1\37\1\67\6\37\3\0\1\67\12\37\5\0"+
    "\3\37\3\70\2\0\3\37\1\70\1\0\1\37\1\0"+
    "\1\70\1\0\2\37\2\70\2\37\4\0\5\37\1\70"+
    "\4\37\6\0\5\3\2\0\1\36\3\3\1\0\1\3"+
    "\1\0\1\71\1\0\6\3\4\0\12\3\6\0\5\3"+
    "\2\0\1\36\3\3\1\0\1\3\1\0\1\3\1\0"+
    "\6\3\4\0\10\3\1\72\1\3\6\0\5\3\2\0"+
    "\1\36\3\3\1\0\1\3\1\0\1\3\1\0\6\3"+
    "\4\0\4\3\1\73\5\3\5\0\3\37\2\46\1\37"+
    "\2\0\4\37\1\0\1\37\1\0\1\41\1\0\6\37"+
    "\4\0\12\37\6\0\5\3\2\0\1\36\3\3\1\0"+
    "\1\3\1\0\1\3\1\0\6\3\4\0\5\3\1\74"+
    "\4\3\6\0\5\3\2\0\1\36\3\3\1\0\1\3"+
    "\1\0\1\3\1\0\5\3\1\75\4\0\12\3\6\0"+
    "\5\3\2\0\1\36\1\76\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\6\3\4\0\12\3\6\0\5\3\2\0"+
    "\1\36\3\3\1\0\1\3\1\0\1\3\1\0\6\3"+
    "\4\0\1\3\1\77\10\3\6\0\5\3\2\0\1\36"+
    "\3\3\1\0\1\3\1\0\1\3\1\0\3\3\1\100"+
    "\2\3\4\0\12\3\6\0\5\3\2\0\1\36\3\3"+
    "\1\0\1\3\1\0\1\3\1\0\6\3\4\0\7\3"+
    "\1\101\2\3\6\0\5\3\2\0\1\36\3\3\1\0"+
    "\1\3\1\0\1\3\1\0\4\3\1\102\1\3\4\0"+
    "\12\3\6\0\5\3\2\0\1\36\3\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\52\4\3\4\0\12\3"+
    "\6\0\5\3\2\0\1\36\3\3\1\0\1\3\1\0"+
    "\1\3\1\0\5\3\1\103\4\0\12\3\6\0\5\3"+
    "\2\0\1\36\3\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\104\4\3\4\0\12\3\6\0\5\3\2\0"+
    "\1\36\3\3\1\0\1\3\1\0\1\3\1\0\6\3"+
    "\4\0\7\3\1\105\2\3\6\0\5\3\2\0\1\36"+
    "\3\3\1\0\1\3\1\0\1\3\1\0\6\3\4\0"+
    "\2\3\1\106\7\3\6\0\5\3\2\0\1\36\3\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\107\4\3"+
    "\4\0\12\3\10\0\3\110\5\0\1\110\3\0\1\110"+
    "\3\0\2\110\13\0\1\110\11\0\3\37\2\66\1\37"+
    "\2\0\4\37\1\0\1\37\1\0\1\37\1\0\6\37"+
    "\4\0\12\37\10\0\2\66\46\0\5\3\2\0\1\36"+
    "\3\3\1\0\1\3\1\0\1\3\1\0\3\3\1\111"+
    "\2\3\4\0\12\3\6\0\5\3\2\0\1\36\2\3"+
    "\1\112\1\0\1\3\1\0\1\3\1\0\6\3\4\0"+
    "\12\3\6\0\5\3\2\0\1\36\3\3\1\0\1\3"+
    "\1\0\1\3\1\0\6\3\4\0\2\3\1\113\7\3"+
    "\6\0\5\3\2\0\1\36\3\3\1\0\1\3\1\0"+
    "\1\52\1\0\6\3\4\0\12\3\6\0\5\3\2\0"+
    "\1\36\3\3\1\0\1\3\1\0\1\114\1\0\6\3"+
    "\4\0\12\3\6\0\5\3\2\0\1\36\3\3\1\0"+
    "\1\3\1\0\1\115\1\0\6\3\4\0\12\3\6\0"+
    "\5\3\2\0\1\36\3\3\1\0\1\3\1\0\1\3"+
    "\1\0\6\3\4\0\5\3\1\116\4\3\6\0\5\3"+
    "\2\0\1\36\3\3\1\0\1\3\1\0\1\3\1\0"+
    "\6\3\4\0\10\3\1\52\1\3\6\0\5\3\2\0"+
    "\1\36\3\3\1\0\1\3\1\0\1\3\1\0\5\3"+
    "\1\76\4\0\12\3\6\0\5\3\2\0\1\36\3\3"+
    "\1\0\1\3\1\0\1\3\1\0\6\3\4\0\2\3"+
    "\1\117\7\3\6\0\5\3\2\0\1\36\3\3\1\0"+
    "\1\3\1\0\1\3\1\0\6\3\4\0\2\3\1\120"+
    "\7\3\6\0\5\3\2\0\1\36\3\3\1\0\1\3"+
    "\1\0\1\3\1\0\6\3\4\0\3\3\1\121\6\3"+
    "\6\0\5\3\2\0\1\36\3\3\1\0\1\3\1\0"+
    "\1\3\1\0\4\3\1\75\1\3\4\0\12\3\6\0"+
    "\5\3\2\0\1\36\3\3\1\0\1\3\1\0\1\3"+
    "\1\0\6\3\4\0\2\3\1\122\7\3\10\0\3\123"+
    "\5\0\1\123\3\0\1\123\3\0\2\123\13\0\1\123"+
    "\12\0\5\3\2\0\1\36\3\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\124\5\3\4\0\12\3\6\0\5\3"+
    "\2\0\1\36\3\3\1\0\1\3\1\0\1\125\1\0"+
    "\6\3\4\0\12\3\6\0\5\3\2\0\1\36\1\3"+
    "\1\126\1\3\1\0\1\3\1\0\1\3\1\0\6\3"+
    "\4\0\12\3\6\0\1\3\1\127\3\3\2\0\1\36"+
    "\3\3\1\0\1\3\1\0\1\3\1\0\6\3\4\0"+
    "\12\3\6\0\5\3\2\0\1\36\3\3\1\0\1\3"+
    "\1\0\1\3\1\0\6\3\4\0\4\3\1\130\5\3"+
    "\6\0\5\3\2\0\1\36\1\3\1\131\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\6\3\4\0\12\3\6\0"+
    "\1\3\1\132\3\3\2\0\1\36\3\3\1\0\1\3"+
    "\1\0\1\3\1\0\6\3\4\0\12\3\6\0\5\3"+
    "\2\0\1\36\3\3\1\0\1\3\1\0\1\3\1\0"+
    "\3\3\1\133\2\3\4\0\12\3\10\0\3\134\5\0"+
    "\1\134\3\0\1\134\3\0\2\134\13\0\1\134\12\0"+
    "\5\3\2\0\1\36\3\3\1\0\1\3\1\0\1\116"+
    "\1\0\6\3\4\0\12\3\6\0\5\3\2\0\1\36"+
    "\3\3\1\0\1\3\1\0\1\3\1\0\1\3\1\115"+
    "\4\3\4\0\12\3\6\0\5\3\2\0\1\36\1\3"+
    "\1\135\1\3\1\0\1\3\1\0\1\3\1\0\6\3"+
    "\4\0\12\3\6\0\5\3\2\0\1\36\3\3\1\0"+
    "\1\3\1\0\1\3\1\0\6\3\4\0\6\3\1\136"+
    "\3\3\6\0\5\3\2\0\1\36\1\3\1\137\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\6\3\4\0\12\3"+
    "\6\0\5\3\2\0\1\36\3\3\1\0\1\3\1\0"+
    "\1\3\1\0\6\3\4\0\4\3\1\115\5\3\6\0"+
    "\5\3\2\0\1\36\3\3\1\0\1\3\1\0\1\3"+
    "\1\0\6\3\4\0\6\3\1\136\1\3\1\140\1\3"+
    "\6\0\5\3\2\0\1\36\2\3\1\141\1\0\1\3"+
    "\1\0\1\3\1\0\6\3\4\0\12\3\10\0\3\3"+
    "\5\0\1\3\3\0\1\3\3\0\2\3\13\0\1\3"+
    "\12\0\5\3\2\0\1\36\3\3\1\0\1\3\1\0"+
    "\1\3\1\0\6\3\4\0\2\3\1\142\7\3\6\0"+
    "\5\3\2\0\1\36\3\3\1\0\1\3\1\0\1\3"+
    "\1\0\3\3\1\143\2\3\4\0\12\3\6\0\1\3"+
    "\1\144\3\3\2\0\1\36\3\3\1\0\1\3\1\0"+
    "\1\3\1\0\6\3\4\0\12\3\6\0\5\3\2\0"+
    "\1\36\3\3\1\0\1\3\1\0\1\145\1\0\6\3"+
    "\4\0\12\3\6\0\5\3\2\0\1\36\3\3\1\0"+
    "\1\3\1\0\1\3\1\0\4\3\1\146\1\3\4\0"+
    "\12\3\6\0\5\3\2\0\1\36\1\3\1\147\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\6\3\4\0\12\3"+
    "\6\0\5\3\2\0\1\36\3\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\150\4\3\4\0\12\3\6\0"+
    "\5\3\2\0\1\36\3\3\1\0\1\3\1\0\1\3"+
    "\1\0\6\3\4\0\6\3\1\151\3\3\6\0\5\3"+
    "\2\0\1\36\3\3\1\0\1\3\1\0\1\3\1\0"+
    "\5\3\1\152\4\0\12\3\6\0\5\3\2\0\1\36"+
    "\3\3\1\0\1\3\1\0\1\153\1\0\6\3\4\0"+
    "\12\3\6\0\5\3\2\0\1\36\3\3\1\0\1\3"+
    "\1\0\1\3\1\0\6\3\4\0\4\3\1\74\5\3"+
    "\6\0\5\3\2\0\1\36\3\3\1\0\1\3\1\0"+
    "\1\3\1\0\6\3\4\0\2\3\1\154\7\3\6\0"+
    "\5\3\2\0\1\36\3\3\1\0\1\3\1\0\1\3"+
    "\1\0\3\3\1\155\2\3\4\0\12\3\6\0\5\3"+
    "\2\0\1\36\3\3\1\0\1\3\1\0\1\3\1\0"+
    "\5\3\1\156\4\0\12\3\6\0\5\3\2\0\1\36"+
    "\3\3\1\0\1\3\1\0\1\3\1\0\5\3\1\74"+
    "\4\0\12\3\6\0\5\3\2\0\1\36\3\3\1\0"+
    "\1\3\1\0\1\3\1\0\3\3\1\157\2\3\4\0"+
    "\12\3\6\0\5\3\2\0\1\36\3\3\1\0\1\3"+
    "\1\0\1\3\1\0\4\3\1\160\1\3\4\0\12\3"+
    "\6\0\5\3\2\0\1\36\3\3\1\0\1\3\1\0"+
    "\1\3\1\0\3\3\1\161\2\3\4\0\12\3\6\0"+
    "\5\3\2\0\1\36\2\3\1\162\1\0\1\3\1\0"+
    "\1\3\1\0\6\3\4\0\12\3\6\0\5\3\2\0"+
    "\1\36\1\163\2\3\1\0\1\3\1\0\1\3\1\0"+
    "\6\3\4\0\12\3\6\0\5\3\2\0\1\36\3\3"+
    "\1\0\1\3\1\0\1\3\1\0\6\3\4\0\4\3"+
    "\1\77\5\3\6\0\5\3\2\0\1\36\3\3\1\0"+
    "\1\3\1\0\1\3\1\0\4\3\1\77\1\3\4\0"+
    "\12\3\6\0\5\3\2\0\1\36\3\3\1\0\1\3"+
    "\1\0\1\164\1\0\6\3\4\0\12\3\6\0\1\3"+
    "\1\165\3\3\2\0\1\36\3\3\1\0\1\3\1\0"+
    "\1\3\1\0\6\3\4\0\12\3\6\0\5\3\2\0"+
    "\1\36\3\3\1\0\1\3\1\0\1\3\1\0\1\166"+
    "\5\3\4\0\12\3\6\0\5\3\2\0\1\36\3\3"+
    "\1\0\1\3\1\0\1\3\1\0\6\3\4\0\7\3"+
    "\1\116\2\3\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4578];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\13\1\2\11\11\1\1\0"+
    "\1\1\1\0\24\1\1\0\1\1\1\0\20\1\1\0"+
    "\12\1\1\0\10\1\1\0\32\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public en() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return null;
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			/* No multi-line comments */
			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public en(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public en(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { addToken(Token.RESERVED_WORD);
          }
        case 14: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 15: break;
        case 8: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 16: break;
        case 13: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 17: break;
        case 4: 
          { addToken(Token.WHITESPACE);
          }
        case 18: break;
        case 9: 
          { addToken(Token.DATA_TYPE);
          }
        case 19: break;
        case 7: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 20: break;
        case 10: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 21: break;
        case 5: 
          { addToken(Token.OPERATOR);
          }
        case 22: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 23: break;
        case 12: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 24: break;
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 25: break;
        case 6: 
          { addToken(Token.SEPARATOR);
          }
        case 26: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 119: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
